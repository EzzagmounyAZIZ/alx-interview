#!/usr/bin/python3
"""Module containing script that reads stdin and computes metrics"""
import sys

# Initialize a dictionary to store counts of status codes
status_codes = {"200": 0, "301": 0, "400": 0, "401": 0,
                "403": 0, "404": 0, "405": 0, "500": 0}
# Initialize a variable to store the total file size
total_size = 0
# Initialize a counter for the number of lines processed
total_num = 0

try:
    for line in sys.stdin:
        # Split the line into parts
        lines = line.split()

        # Check if the line has at least 2 elements (status code and file size)
        if len(lines) > 1:
            code = lines[-2]  # Second last element is the status code
            size = lines[-1]  # Last element is the file size

            # Check if size is an integer, if not skip the line
            if size.isdigit():
                size = int(size)
                total_size += size  # Accumulate the file size

            # Increment the status code count if it exists in the dictionary
            if code in status_codes:
                status_codes[code] += 1

            # Increment the line counter
            total_num += 1

        # Every 10 lines, print the statistics
        if total_num == 10:
            print("File size: {}".format(total_size))
            for k in sorted(status_codes.keys()):
                if status_codes[k] > 0:
                    print("{}: {}".format(k, status_codes[k]))
            total_num = 0  # Reset the line counter after printing

except KeyboardInterrupt:
    # In case of keyboard interruption, print the statistics
    print("File size: {}".format(total_size))
    for k in sorted(status_codes.keys()):
        if status_codes[k] > 0:
            print("{}: {}".format(k, status_codes[k]))
    raise

finally:
    # Always print the statistics when the program ends
    print("File size: {}".format(total_size))
    for k in sorted(status_codes.keys()):
        if status_codes[k] > 0:
            print("{}: {}".format(k, status_codes[k]))

